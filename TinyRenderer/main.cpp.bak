#include <vector>
#include <cmath>
#include <climits>
#include <iostream>
#include "tgaimage.h"
#include "model.h"
#include "geometry.h"
#include "render.h"
#include <fstream>
#include <sstream>

Model* model = NULL;
const int width = 1024;
const int height = 1024;
const int depth = 255;
Vec3f light_dir=Vec3f(1,-1,1).normalize();
Vec3f camera(-1,1,3);
Vec3f centre(0,0,0);

Vec3f m2v(Matrix m){
    Vec3f res;
    res.x = m[0][0]/m[3][0];
    res.y = m[1][0]/m[3][0];
    res.z = m[2][0]/m[3][0];
    return res;
}

Matrix v2m(Vec3f v){
    Matrix m(4,1);
    m[0][0] = v.x;
    m[1][0] = v.y;
    m[2][0] = v.z;
    m[3][0] = 1.f;
    return m;
}

Matrix viewport(int x,int y,int width,int height,int depth){
    Matrix m = Matrix::identity(4);
    m[0][3] = x+width/2.f;
    m[1][3] = y+height/2.f;
    m[2][3] = depth/2.f;
    m[0][0] = width/2.f;
    m[1][1] = height/2.f;
    m[2][2] = depth/2.f;
    return m;
}

Vec3f world2screen(Vec3f v) {
    return Vec3f(int((v.x+1.)*width/2.+.5), int((v.y+1.)*height/2.+.5), v.z);
}

Matrix lookat(Vec3f camera,Vec3f centre,Vec3f upVec){
    Vec3f z = (camera-centre).normalize();
    Vec3f x = (upVec^z).normalize();
    Vec3f y = (z^x).normalize();
    Matrix res=Matrix::identity(4);
    for(int i=0;i<3;++i){
        res[0][i]=x[i];
        res[1][i]=y[i];
        res[2][i]=z[i];
        res[i][3]=-centre[i];
    }
    return res;
}

int main(int argc, char** argv) {
    if (2 == argc) {
        model = new Model(argv[1]);
    }
    else {
        model = new Model("../obj/Head.obj");
    }
    TGAImage *uv = new TGAImage;
    uv->read_tga_file("../texture/uv.tga");
    uv->flip_vertically();

    //std::ofstream ofs("../logs/render_log_2.txt");

    Matrix Projection = Matrix::identity(4);
    Matrix ViewPort = viewport(width/8,height/8,width*3/4,height*3/4,depth);
    Projection[3][2] = -1.f/camera.z;
    Matrix ModelView=lookat(camera,centre,Vec3f(0,1,0));

    TGAImage scene(width, height, TGAImage::RGB);
    int *zbuffer = new int[width*height];
    for(int i=0;i<width*height;++i)zbuffer[i]=-std::numeric_limits<int>::max();
    for (int i=0; i<model->nfaces(); i++) {
        std::vector<int> face = model->face(i);
        Vec3f vts[3];
        Vec3i screen_coords[3];
        Vec3f world_coords[3];
        float intensity[3];
        for (int j=0; j<3; j++) {
            Vec3f v = model->vert(face[j]);
            screen_coords[j] =  m2v(ViewPort*Projection*ModelView*v2m(v));
            world_coords[j]  = v;
            intensity[j] = model->getNorm(i, j)*light_dir;
        }
        for(int i=0;i<3;++i)vts[i]=model->getUV(face[i+3]);
        triangle(screen_coords,scene,zbuffer,width,height,uv,vts,intensity);
    }
    
    scene.flip_vertically();
    scene.write_tga_file("output.tga");
    {
        TGAImage zbimage(width, height, TGAImage::GRAYSCALE);
        for (int i=0; i<width; i++) {
            for (int j=0; j<height; j++) {
                zbimage.set(i, j, TGAColor(zbuffer[i+j*width], zbuffer[i+j*width],zbuffer[i+j*width]));
                //ofs<<i<<' '<<j<<' '<<zbuffer[i+j*width]<<'\n';
            }
        }
        zbimage.flip_vertically(); 
        zbimage.write_tga_file("zbuffer.tga");
    }
    //ofs.close();
    delete model;
    //delete uv;
    delete[]zbuffer;
    return 0;
}  